{"ast":null,"code":"// Handles the initation and manipulation of\n// pixijs elements\nimport * as PIXI from \"pixi.js\";\nimport React from 'react';\n\nclass PIXIApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.app = void 0;\n\n    const setup = () => {\n      let sprite = new PIXI.Sprite(this.app.loader.resources[\"../fetchlogo.jpg\"].texture);\n      this.app.stage.addChild(sprite);\n    };\n\n    this.app = new PIXI.Application({\n      height: 500,\n      width: 500\n    }); // hard coded for now bc i am trash. \n\n    var renderer = PIXI.autoDetectRenderer();\n    document.body.appendChild(this.app.view);\n    this.app.view.style.position = 'absolute';\n    this.app.view.style.left = '50%';\n    this.app.view.style.top = '50%';\n    this.app.view.style.transform = 'translate3d( -50%, -50%, 0 )';\n    this.app.loader.add(\"../fetchlogo.jpg\").load(setup);\n  }\n\n  render() {\n    // returns nothing, but I wanted it to be part of the component tree for organization purposes\n    return /*#__PURE__*/React.createElement(React.Fragment, null);\n  }\n\n}\n\nexport default PIXIApp;","map":{"version":3,"sources":["/home/phillz/Documents/philiptran-sandbox/app_controller/src/components/pixiApp.tsx"],"names":["PIXI","React","PIXIApp","Component","constructor","props","app","setup","sprite","Sprite","loader","resources","texture","stage","addChild","Application","height","width","renderer","autoDetectRenderer","document","body","appendChild","view","style","position","left","top","transform","add","load","render"],"mappings":"AAAA;AACA;AAEA,OAAO,KAAKA,IAAZ,MAAsB,SAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,OAAN,SAAsBD,KAAK,CAACE,SAA5B,CAAsC;AAIlCC,EAAAA,WAAW,CAACC,KAAD,EAAa;AACpB,UAAMA,KAAN;AADoB,SAFhBC,GAEgB;;AAEpB,UAAMC,KAAK,GAAG,MAAM;AAChB,UAAIC,MAAM,GAAG,IAAIR,IAAI,CAACS,MAAT,CACT,KAAKH,GAAL,CAASI,MAAT,CAAgBC,SAAhB,CAA0B,kBAA1B,EAA8CC,OADrC,CAAb;AAGA,WAAKN,GAAL,CAASO,KAAT,CAAeC,QAAf,CAAwBN,MAAxB;AACH,KALD;;AAMA,SAAKF,GAAL,GAAW,IAAIN,IAAI,CAACe,WAAT,CAAqB;AAACC,MAAAA,MAAM,EAAC,GAAR;AAAaC,MAAAA,KAAK,EAAC;AAAnB,KAArB,CAAX,CARoB,CAQsC;;AAC1D,QAAIC,QAAQ,GAAGlB,IAAI,CAACmB,kBAAL,EAAf;AAAyCC,IAAAA,QAAQ,CAACC,IAAT,CAAcC,WAAd,CAA0B,KAAKhB,GAAL,CAASiB,IAAnC;AAAyC,SAAKjB,GAAL,CAASiB,IAAT,CAAcC,KAAd,CAAoBC,QAApB,GAA+B,UAA/B;AAA0C,SAAKnB,GAAL,CAASiB,IAAT,CAAcC,KAAd,CAAoBE,IAApB,GAA2B,KAA3B;AAAiC,SAAKpB,GAAL,CAASiB,IAAT,CAAcC,KAAd,CAAoBG,GAApB,GAA0B,KAA1B;AAAgC,SAAKrB,GAAL,CAASiB,IAAT,CAAcC,KAAd,CAAoBI,SAApB,GAAgC,8BAAhC;AAC7L,SAAKtB,GAAL,CAASI,MAAT,CACCmB,GADD,CACK,kBADL,EAECC,IAFD,CAEMvB,KAFN;AAGH;;AAEDwB,EAAAA,MAAM,GAAE;AAAE;AACN,wBAAO,yCAAP;AACH;;AArBiC;;AA0BtC,eAAe7B,OAAf","sourcesContent":["// Handles the initation and manipulation of\n// pixijs elements\n\nimport * as PIXI from \"pixi.js\"\nimport React from 'react';\n\nclass PIXIApp extends React.Component {\n    \n    private app: PIXI.Application; \n\n    constructor(props: any) {\n        super(props);\n        const setup = () => {\n            let sprite = new PIXI.Sprite(\n                this.app.loader.resources[\"../fetchlogo.jpg\"].texture\n              );\n            this.app.stage.addChild(sprite);\n        }\n        this.app = new PIXI.Application({height:500, width:500}); // hard coded for now bc i am trash. \n        var renderer = PIXI.autoDetectRenderer();document.body.appendChild(this.app.view);this.app.view.style.position = 'absolute';this.app.view.style.left = '50%';this.app.view.style.top = '50%';this.app.view.style.transform = 'translate3d( -50%, -50%, 0 )';\n        this.app.loader\n        .add(\"../fetchlogo.jpg\")\n        .load(setup);\n    }\n\n    render(){ // returns nothing, but I wanted it to be part of the component tree for organization purposes\n        return(<></>);\n    }\n    \n\n}\n\nexport default PIXIApp;"]},"metadata":{},"sourceType":"module"}