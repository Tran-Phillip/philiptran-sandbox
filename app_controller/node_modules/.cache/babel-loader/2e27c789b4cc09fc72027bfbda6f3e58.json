{"ast":null,"code":"var _jsxFileName = \"/home/phillz/Documents/philiptran-sandbox/app_controller/src/components/bluetoothHandler.tsx\";\n// Handles connecting to bluetooth and sending files over BLE\n// Renders a button to prompt user to connect to bluetooth device\n// and an input field to upload a .bin file \nimport React from 'react';\n\nclass FileHandler {\n  // handles file loading and file sending over BLE\n  constructor(fileRef) {\n    this.idx = void 0;\n    this.chunks = void 0;\n    this.fileRef = void 0;\n    this.idx = 0;\n    this.chunks = [];\n    this.fileRef = fileRef;\n  }\n\n  set(chunks) {\n    this.idx = 0;\n    this.chunks = chunks;\n  }\n\n  nextChunk() {\n    return this.chunks[this.idx++];\n  }\n\n  getIdx() {\n    return this.idx;\n  }\n\n  hasNext() {\n    return this.idx < this.chunks.length;\n  }\n\n  loadFile() {\n    // load the file stored in the 'input' element of BluetoothHandler\n    let input = this.fileRef.current;\n    let file = input.files[0];\n    let fr = new FileReader();\n\n    const processLoadedText = () => {\n      let result = fr.result;\n      console.log(\"sending first chunk!\"); // TEST VARS TO SEE HOW LONG PROCESSS TOOK! \n\n      var currentdate = new Date();\n      var datetime = \"Last Sync: \" + currentdate.getDate() + \"/\" + (currentdate.getMonth() + 1) + \"/\" + currentdate.getFullYear() + \" @ \" + currentdate.getHours() + \":\" + currentdate.getMinutes() + \":\" + currentdate.getSeconds();\n      console.log(datetime);\n\n      if (result) {\n        this.chunks = split(result);\n        console.log(this.chunks);\n      }\n    };\n\n    fr.onload = processLoadedText.bind(this);\n    fr.readAsArrayBuffer(file);\n  }\n\n}\n\nclass BluetoothHandler extends React.Component {\n  constructor(props) {\n    super(props);\n    this.characteristic = void 0;\n    this.fileHandler = void 0;\n    this.fileRef = void 0;\n    this.characteristic = null;\n    this.fileRef = React.createRef();\n    this.fileHandler = new FileHandler(this.fileRef);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.connectToDevice.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 13\n      }\n    }, \" Connnect \"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"file\",\n      ref: this.fileRef,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.fileHandler.loadFile.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }\n    }, \" Upload \"));\n  }\n\n  connectToDevice() {\n    let navigator = window.navigator;\n    var UUID = \"4fafc201-1fb5-459e-8fcc-c5c9c331914b\";\n    navigator.bluetooth.requestDevice({\n      acceptAllDevices: true,\n      optionalServices: [UUID]\n    }).then(device => {\n      console.log('Connecting to GATT Server...');\n      return device.gatt.connect();\n    }).then(server => {\n      console.log(\"getting service\");\n      return server.getPrimaryService(UUID);\n    }).then(service => {\n      console.log(\"Getting characteristics\");\n      return service.getCharacteristic('beb5483e-36e1-4688-b7f5-ea07361b26a8');\n    }).then(_characteristic => {\n      console.log(\"getting characteristic\");\n      this.characteristic = _characteristic; // this._characteristic.addEventListener('characteristicvaluechanged',\n      // send_next_bytes);\n\n      console.log(this.characteristic);\n      this.characteristic.startNotifications();\n    });\n  }\n\n  sendFile() {}\n\n}\n\nfunction split(result) {\n  let chunkSize = 511; // save 1 byte for our delimiter (max bytes is 512)\n\n  let splitList = [];\n  let enc = new TextEncoder(); // used to encode our delimiters \n\n  while (result.byteLength > 0) {\n    var chunk = result.slice(0, chunkSize);\n    splitList.push(appendBuffer(chunk, enc.encode('|')));\n    result = result.slice(511);\n  } // send over the bytelength of the final chunk to send to C side so it knows when \n  // all the chunks have been sent.\n\n\n  splitList.unshift(enc.encode(\"\" + splitList[splitList.length - 1].byteLength));\n  return splitList;\n}\n\nfunction appendBuffer(buffer1, buffer2) {\n  var tmp = new Uint8Array(buffer1.byteLength + buffer2.byteLength);\n  tmp.set(new Uint8Array(buffer1), 0);\n  tmp.set(new Uint8Array(buffer2), buffer1.byteLength);\n  return tmp.buffer;\n}\n\n;\nexport default BluetoothHandler;","map":{"version":3,"sources":["/home/phillz/Documents/philiptran-sandbox/app_controller/src/components/bluetoothHandler.tsx"],"names":["React","FileHandler","constructor","fileRef","idx","chunks","set","nextChunk","getIdx","hasNext","length","loadFile","input","current","file","files","fr","FileReader","processLoadedText","result","console","log","currentdate","Date","datetime","getDate","getMonth","getFullYear","getHours","getMinutes","getSeconds","split","onload","bind","readAsArrayBuffer","BluetoothHandler","Component","props","characteristic","fileHandler","createRef","render","connectToDevice","navigator","window","UUID","bluetooth","requestDevice","acceptAllDevices","optionalServices","then","device","gatt","connect","server","getPrimaryService","service","getCharacteristic","_characteristic","startNotifications","sendFile","chunkSize","splitList","enc","TextEncoder","byteLength","chunk","slice","push","appendBuffer","encode","unshift","buffer1","buffer2","tmp","Uint8Array","buffer"],"mappings":"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","sourcesContent":["// Handles connecting to bluetooth and sending files over BLE\n// Renders a button to prompt user to connect to bluetooth device\n// and an input field to upload a .bin file \n\nimport React from 'react';\n\nclass FileHandler {\n    // handles file loading and file sending over BLE\n\n    private idx:number;\n    private chunks:Array<ArrayBuffer>;\n    private fileRef: any;\n\n    constructor(fileRef: any) {\n        this.idx = 0;\n        this.chunks = [];\n        this.fileRef = fileRef;\n    }\n\n    set(chunks:Array<ArrayBuffer>) {\n        this.idx = 0;\n        this.chunks = chunks;\n    }\n\n    nextChunk() {\n        return(this.chunks[this.idx++]);\n    }\n\n    getIdx() {\n        return(this.idx);\n    }\n\n    hasNext() {\n        return(this.idx < this.chunks.length);\n    }\n\n    loadFile() {\n        // load the file stored in the 'input' element of BluetoothHandler\n        let input = this.fileRef.current;\n        let file = input.files[0];\n        let fr = new FileReader(); \n\n        const processLoadedText = () => {\n            let result = fr.result as ArrayBuffer; \n            console.log(\"sending first chunk!\"); \n\n            // TEST VARS TO SEE HOW LONG PROCESSS TOOK! \n\n            var currentdate = new Date(); \n            var datetime = \"Last Sync: \" + currentdate.getDate() + \"/\"\n                    + (currentdate.getMonth()+1)  + \"/\" \n                    + currentdate.getFullYear() + \" @ \"  \n                    + currentdate.getHours() + \":\"  \n                    + currentdate.getMinutes() + \":\" \n                    + currentdate.getSeconds();\n            console.log(datetime)\n\n            if(result)\n            {\n                this.chunks = split(result);\n                console.log(this.chunks);\n            }\n\n        }\n\n        fr.onload = processLoadedText.bind(this); \n        fr.readAsArrayBuffer(file); \n    }\n\n}\n\nclass BluetoothHandler extends React.Component {\n\n    private characteristic: any;\n    private fileHandler: FileHandler;\n    private fileRef: any;\n\n    constructor(props: any) {\n        super(props); \n        this.characteristic = null;\n        this.fileRef = React.createRef();\n        this.fileHandler = new FileHandler(this.fileRef);\n    }\n\n    render() {\n        return ( \n            <>\n            <button onClick = {this.connectToDevice.bind(this)}> Connnect </button> \n            <input type=\"file\" ref={this.fileRef}></input>\n            <button onClick={this.fileHandler.loadFile.bind(this)}> Upload </button>\n            </>\n        );\n    }\n\n    connectToDevice() {\n        let navigator: any = window.navigator\n        var UUID = \"4fafc201-1fb5-459e-8fcc-c5c9c331914b\";\n        navigator.bluetooth.requestDevice({acceptAllDevices:true,optionalServices: [UUID]})\n        .then((device: { gatt: { connect: () => any; }; }) => {\n            console.log('Connecting to GATT Server...');\n            return device.gatt.connect();\n        })\n        .then((server: { getPrimaryService: (arg0: string) => any; }) => {\n            console.log(\"getting service\");\n            return(server.getPrimaryService(UUID));\n        })\n        .then((service: { getCharacteristic: (arg0: string) => any; }) => {\n            console.log(\"Getting characteristics\");\n            return service.getCharacteristic('beb5483e-36e1-4688-b7f5-ea07361b26a8');\n        })\n        .then((_characteristic: any) => {\n            console.log(\"getting characteristic\");\n            this.characteristic = _characteristic;\n            // this._characteristic.addEventListener('characteristicvaluechanged',\n            // send_next_bytes);\n            console.log(this.characteristic);\n\n            this.characteristic.startNotifications();\n        })\n    }\n\n    sendFile(){\n\n    }\n\n\n}\n\nfunction split(result:ArrayBuffer){\n\n    let chunkSize = 511; // save 1 byte for our delimiter (max bytes is 512)\n    let splitList = []; \n    let enc = new TextEncoder(); // used to encode our delimiters \n\n    while(result.byteLength > 0) {\n        var chunk = result.slice(0, chunkSize);\n        splitList.push(appendBuffer(chunk, enc.encode('|')));\n        result = result.slice(511);\n    }\n\n    // send over the bytelength of the final chunk to send to C side so it knows when \n    // all the chunks have been sent.\n    splitList.unshift(enc.encode(\"\"+splitList[splitList.length - 1].byteLength));\n    return splitList;\n}\n\nfunction  appendBuffer(buffer1: ArrayBuffer, buffer2: ArrayBuffer) {\n    var tmp = new Uint8Array(buffer1.byteLength + buffer2.byteLength);\n    tmp.set(new Uint8Array(buffer1), 0);\n    tmp.set(new Uint8Array(buffer2), buffer1.byteLength);\n    return tmp.buffer;\n};\n\nexport default BluetoothHandler;"]},"metadata":{},"sourceType":"module"}